/**
 * @file @target_name@.@header_ext@
 * @author RMVL Community
 * @brief @class_name@ module header file (Generated by CMake automatically, DO NOT MODIFY!)
 * 
 * @copyright Copyright @year@ (c), RMVL Community
 * 
 */

#pragma once

#include <opencv2/core/types.hpp>

@def_new_group@
namespace rm::para
{

//! @addtogroup para_@module_name@
//! @{
//! @details
//! - 类名： @class_name@ ，对应的全局参数变量： `rm::para::@target_name@_param`
//! @} para_@module_name@

//! @addtogroup para_@module_name@
//! @{

////////////////////// 扩展部分 //////////////////////

@para_header_enum@
////////////////////// 参数部分 //////////////////////

//! @class_name@ 参数模块
struct @class_name@
{
@para_header_details@
    /**
     * @brief 从指定 `YAML` 文件中加载，并读取至 `@class_name@` 中
     *
     * @note `YAML` 文件的后缀允许是 `*.yml` 和 `*.yaml`
     * @param[in] path 参数路径
     * @return 是否读取成功
     */
    bool read(const std::string &path);

    /**
     * @brief 将 `@class_name@` 的数据写入指定的 `YAML` 文件中
     *
     * @note `YAML` 文件的后缀允许是 `*.yml` 和 `*.yaml`
     * @param[in] path 参数路径
     * @return 是否写入成功
     */
    bool write(const std::string &path) const;

    /**
     * @brief 从指定 `YAML` 文件中加载 `@class_name@`
     * @deprecated 请使用 `read` 方法
     */
    [[deprecated]] bool load(const std::string &path) { return read(path); }
};

//! @class_name@ 参数模块
inline @class_name@ @target_name@_param;

//! @} para_@module_name@

} // namespace rm::para
