# ===================================================================================
#  RMVL CMake Configuation file
#
#          ** This file is generated automatically. Do not modify! **
#
#  Usage from an external project:
#    In your CMakeLists.txt, add these lines:
#
#    find_package(RMVL REQUIRED)
#    target_include_directories(MY_TARGET_NAME PUBLIC ${RMVL_INCLUDE_DIRS})
#    target_link_libraries(MY_TARGET_NAME ${RMVL_LIBS})
#
#    Or you can search for specific RMVL modules:
#
#    find_package(RMVL REQUIRED core opcua)
#
#    This file will define the following variables:
#      - RMVL_LIBS           : The list of all imported targets for RMVL modules.
#      - RMVL_INCLUDE_DIRS   : RMVL include directories.
#      - RMVL_FOUND          : RMVL is found or not.
#      - RMVL_VERSION        : The version of this RMVL build: "@RMVL_VERSION_PLAIN@"
#      - RMVL_VERSION_MAJOR  : Major version part of RMVL_VERSION: "@RMVL_VERSION_MAJOR@"
#      - RMVL_VERSION_MINOR  : Minor version part of RMVL_VERSION: "@RMVL_VERSION_MINOR@"
#      - RMVL_VERSION_PATCH  : Patch version part of RMVL_VERSION: "@RMVL_VERSION_PATCH@"
#      - RMVL_VERSION_STATUS : Development status of this build: "@RMVL_VERSION_STATUS@"
#
#    Advanced variables:
#      - RMVL_INSTALL_PATH   : RMVL location
#      - RMVL_LIB_COMPONENTS : Present RMVL modules list
#
# ===================================================================================

# =============================================================
#  Version variables:
# =============================================================
set(RMVL_VERSION @RMVL_VERSION_PLAIN@)
set(RMVL_VERSION_MAJOR @RMVL_VERSION_MAJOR@)
set(RMVL_VERSION_MINOR @RMVL_VERSION_MINOR@)
set(RMVL_VERSION_PATCH @RMVL_VERSION_PATCH@)
set(RMVL_VERSION_STATUS "@RMVL_VERSION_STATUS@")

include(FindPackageHandleStandardArgs)

if(RMVL_FIND_COMPONENTS)
  list(APPEND _RMVL_FPHSA_ARGS HANDLE_COMPONENTS)
endif()

get_filename_component(RMVL_CONFIG_PATH "${CMAKE_CURRENT_LIST_DIR}" REALPATH)
get_filename_component(RMVL_INSTALL_PATH "${RMVL_CONFIG_PATH}/@RMVL_INSTALL_PATH_RELATIVE_CONFIGCMAKE@" REALPATH)

set(RMVL_LIB_COMPONENTS @RMVL_MODULES_CONFIGCMAKE@)
set(__RMVL_INCLUDE_DIRS @RMVL_INCLUDE_DIRS_CONFIGCMAKE@)

# =============================================================
#  Include directories configuration
# =============================================================
# Get include directories: RMVL_INCLUDE_DIRS
set(RMVL_INCLUDE_DIRS "")
foreach(d ${__RMVL_INCLUDE_DIRS})
  get_filename_component(__d "${d}" REALPATH)
  if(NOT EXISTS "${__d}")
    message(WARNING "RMVL: Include directory doesn't exist: '${d}'. RMVL installation may be broken. Skip...")
  else()
    list(APPEND RMVL_INCLUDE_DIRS "${__d}")
  endif()
endforeach()
unset(__d)

# =============================================================
#  Targets or libraries configuration
# =============================================================
# Get imported targets found in Module mode
@RMVL_MODULES_IMPORTED_CONFIGCMAKE@
# Export configuration
if(NOT TARGET rmvl_feature)
  include(${CMAKE_CURRENT_LIST_DIR}/RMVLModules.cmake)
endif()

# Get third-party libraries in the system, cross-compilation requires manual specification of these paths
@RMVL_3RD_PKGS_CONFIGCMAKE@

# Form list of modules (components) to find
if(NOT RMVL_FIND_COMPONENTS)
  set(RMVL_FIND_COMPONENTS ${RMVL_LIB_COMPONENTS})
endif()

# Get the target list: RMVL_LIBS
foreach(__rmvlcomponent ${RMVL_FIND_COMPONENTS})
  set(__origin_rmvlcomponent ${__rmvlcomponent})
  if(NOT __rmvlcomponent MATCHES "^rmvl_")
    set(__rmvlcomponent rmvl_${__rmvlcomponent})
  endif()
  if(NOT TARGET ${__rmvlcomponent})
    message(WARNING "RMVL: Component '${__rmvlcomponent}' is not found. Skip...")
    set(RMVL_${__origin_rmvlcomponent}_FOUND 0)
  else()
    set(RMVL_${__origin_rmvlcomponent}_FOUND 1)
    set(RMVL_LIBS ${RMVL_LIBS} "${__rmvlcomponent}")
  endif()
endforeach()

# =============================================================
#  Get RMVL search results
# =============================================================
find_package_handle_standard_args(RMVL
  REQUIRED_VARS RMVL_INSTALL_PATH
  VERSION_VAR RMVL_VERSION ${_RMVL_FPHSA_ARGS}
)
